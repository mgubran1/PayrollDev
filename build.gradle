plugins {
    id 'java'
    id 'application'
}

group = 'com.company'
version = '0.1.0'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.openjfx:javafx-controls:24.0.1'
    implementation 'org.openjfx:javafx-fxml:24.0.1'
    implementation 'org.openjfx:javafx-base:24.0.1'
    implementation 'org.openjfx:javafx-graphics:24.0.1'
    implementation 'org.xerial:sqlite-jdbc:3.45.3.0'
    implementation 'org.slf4j:slf4j-api:2.0.13'
    runtimeOnly 'ch.qos.logback:logback-classic:1.4.14'
    implementation 'org.apache.poi:poi-ooxml:5.2.3'
    
    // Add Log4j-to-SLF4J bridge to redirect Apache POI's Log4j2 calls to SLF4J/Logback
    implementation 'org.apache.logging.log4j:log4j-to-slf4j:2.21.1'
    
    // Apache PDFBox for PDF generation and manipulation
    implementation 'org.apache.pdfbox:pdfbox:3.0.2'
    implementation 'org.apache.pdfbox:pdfbox-tools:3.0.2'
    
    // Apache Commons for utility functions
    implementation 'org.apache.commons:commons-lang3:3.14.0'
    
    // For better date/time handling (optional but recommended)
    implementation 'org.threeten:threeten-extra:1.7.2'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    sourceCompatibility = '24'
    targetCompatibility = '24'
}

application {
    mainClass = 'com.company.payroll.Main'
    applicationDefaultJvmArgs = [
        '--enable-native-access=javafx.graphics',
        '--enable-native-access=ALL-UNNAMED'
    ]
}

// Create a runnable JAR with all dependencies
jar {
    manifest {
        attributes(
            'Main-Class': 'com.company.payroll.Main',
            'Implementation-Title': 'Payroll Desktop',
            'Implementation-Version': version,
            'Implementation-Vendor': 'Company Inc.',
            'Built-By': System.getProperty('user.name'),
            'Built-Date': new Date().format('yyyy-MM-dd HH:mm:ss')
        )
    }
}

// Task to create a fat JAR with all dependencies
task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'com.company.payroll.Main'
    }
    archiveBaseName = project.name
    archiveVersion = project.version
    archiveClassifier = 'all'
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}

// Clean task enhancement
clean {
    doLast {
        delete 'logs'
        delete 'load_documents'
        delete 'exports'
        delete 'backups'
        delete 'payroll.db'
        delete 'payroll.db-shm'
        delete 'payroll.db-wal'
    }
}